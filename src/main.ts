import { red, white } from "kolorist";
import path from "node:path";
import prompts from "prompts";
import fs from "node:fs";
import { copy, isEmpty, pkgFromUserAgent } from "./utils/functions";
import {
  packageBundlers,
  packageFeatures as features,
  packageTypes,
  templates,
  types,
  Option,
} from "./utils/options";

const cwd = process.cwd();

const defaultPackageDir = "my-package";
const defaultPackageDescription = "npm package generated by bundle-templates";
const defaultPackageAuthor = "";
const defaultPackageRepo = "";

async function run() {
  const argBundler = undefined;
  const argType = undefined;

  let packageDir = defaultPackageDir;
  let packageDescription = defaultPackageDescription;
  let packageAuthor = defaultPackageAuthor;
  let packageRepo = defaultPackageRepo;
  const getProjectName = () =>
    packageDir === "." ? path.basename(path.resolve()) : packageDir;

  let cli: prompts.Answers<
    | "packageName"
    | "packageDescription"
    | "packageAuthor"
    | "packageRepo"
    | "packageBundler"
    | "packageType"
    | "packageFeatures"
  >;

  try {
    cli = await prompts(
      [
        {
          type: argBundler && templates.includes(argBundler) ? null : "text",
          name: "packageName",
          message: white("Package Name: "),
          initial: defaultPackageDir,
          onState: (state) => {
            packageDir = state.value || defaultPackageDir;
          },
          validate: (value) =>
            !fs.existsSync(value) || isEmpty(value)
              ? true
              : `'${value}' Already Exists, Choose Another`,
        },
        {
          type: "text",
          name: "packageDescription",
          message: white("Package Description: "),
          initial: defaultPackageDescription,
          onState: (state) => {
            packageDescription = state.value || defaultPackageDescription;
          },
        },
        {
          type: "text",
          name: "packageAuthor",
          message: white("Package Author: "),
          initial: defaultPackageAuthor,
          onState: (state) => {
            packageAuthor = state.value || defaultPackageAuthor;
          },
        },
        {
          type: "text",
          name: "packageRepo",
          message: white("Package Repository: "),
          initial: defaultPackageRepo,
          onState: (state) => {
            packageRepo = state.value || defaultPackageRepo;
          },
        },
        {
          type: argBundler && templates.includes(argBundler) ? null : "select",
          name: "packageBundler",
          message:
            typeof argBundler === "string" && !templates.includes(argBundler)
              ? white(
                  `The Bundler Chosen (${argBundler}) Is Not Valid, Please Choose From The List Below`
                )
              : white("Select a Bundler"),
          initial: 0,
          choices: packageBundlers.map((type) => {
            const color = type.color;
            return {
              title: color(type.displayName || type.name),
              value: type,
            };
          }),
        },
        {
          type: argType && types.includes(argType) ? null : "select",
          name: "packageType",
          message:
            typeof argType === "string" && !types.includes(argType)
              ? white(
                  `The Type Chosen (${argType}) Is Not Valid, Please Choose From The List Below`
                )
              : white("Select a Type"),
          initial: 0,
          choices: packageTypes.map((type) => {
            const color = type.color;
            return {
              title: color(type.displayName || type.name),
              value: type,
            };
          }),
        },
        {
          type: "multiselect",
          name: "packageFeatures",
          instructions: false,
          message: white(
            "Select a The Features You Want To Use (Use Space To Select): "
          ),
          initial: 0,
          choices: features.map((feature) => {
            const color = feature.color;
            return {
              title: color(feature.displayName || feature.name),
              value: feature,
            };
          }),
        },
      ],
      {
        onCancel: () => {
          throw new Error(red("CANCELED BY DEVELOPER"));
        },
      }
    );
  } catch (cancelled: any) {
    console.log(cancelled.message);
    return;
  }

  const { packageBundler, packageType, packageFeatures } = cli;

  const root = path.join(cwd, packageDir);
  const template = packageBundler ? packageBundler.name : argBundler;
  const type = packageType ? packageType.name : argType;
  const pkgInfo = pkgFromUserAgent(process.env.npm_config_user_agent);
  const pkgManager = pkgInfo ? pkgInfo.name : "npm";
  const featuresArr = packageFeatures.map((feature: Option) => {
    return feature.name;
  });

  fs.mkdirSync(root, { recursive: true });

  console.log(`\nCreating New Package In ${root}`);

  const localTemplateDir = path.join(cwd, "templates", `${template}-${type}`);

  const write = (file: string, content?: string) => {
    const targetPath = path.join(root, file);
    if (content) {
      fs.writeFileSync(targetPath, content);
    } else {
      copy(path.join(localTemplateDir, file), targetPath);
    }
  };

  const pkg = JSON.parse(
    fs.readFileSync(path.join(localTemplateDir, `package.json`), "utf-8")
  );

  let pkgDevDeps = pkg.devDependencies;
  if (featuresArr.includes("unit-testing")) {
    const vitestConfig = fs.readFileSync(
      path.join(cwd, "tools", "vitest.config.ts"),
      "utf-8"
    );
    pkgDevDeps["@vitest/ui"] = "0.29.8";
    pkgDevDeps.vitest = "0.29.8";
    pkg.scripts.test = "vitest";
    pkg.scripts["test:ui"] = "vitest --ui";
    write("vitest.config.ts", vitestConfig);
  }

  pkg.name == getProjectName();
  pkg.description = packageDescription;
  pkg.author = packageAuthor;
  pkg.repository = packageRepo;
  pkg.peerDependencies = pkg.peerDependencies;
  pkg.devDependencies = pkgDevDeps;
  pkg.dependencies = pkg.dependencies;

  write("package.json", JSON.stringify(pkg, null, 2));

  const files = fs.readdirSync(localTemplateDir);
  files
    .filter((f) => f !== "package.json")
    .forEach((file) => {
      write(file);
    });

  console.log(`\Package Starter Bundle Initialized`);
  console.log(`\nRun The Commands Below To Start, Happy Coding !!\n`);
  if (root !== cwd) {
    console.log(`  cd ${path.relative(cwd, root)}`);
  }
  console.log(`  ${pkgManager} install`);
  console.log(`  ${pkgManager} run dev`);
}

try {
  run();
} catch (error) {
  console.log(red("Error Occurred"));
}
